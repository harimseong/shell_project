# put some content in abc
< abc | ls
# abc doesn't change
> abc | ls
# abc becomes empty
# $? == 0 && ls works normally on both cases


# parse error
# echo "abc" > text.txt | ls -a |||| ls -l


# equal sign
touch a=b && echo "123" > a=b
cat a=b


# $
export TEST=cat
$TEST -e
export TEST2='<'
$TEST $TEST2 some_file


# ""
"echo" abc


cat" -e" 	#fail
cat " -e"	#success, fail on recent version of bash?
export TEST1="cat"
export TEST2=" -e"
$TEST1$TEST2		#success(two token)
echo $TEST1$TEST2	#one token?

c"a"t -e 	#success
c"a"t$TEST2 #success

""			#"\0" token
"" a		#"\0" "a" tokens
""a			#"a" token

# | ls -al
ls -al | #

$			$# $ token
echo $		$# $
$$			# number


# Ctrl-C running process and check its status


ls < 'nonexist file' | ls -a	# only 'ls -a' outputs


#<< 123 | cat -e			# heredoc takes input but not transfer it to cat 
> 'filename' | cat -e	# the file is truncated and nothing prints out.

cat -e | wc				# wc blocks until cat ends
cat -e > /dev/ttys??? | wc	# wc doesn't block


#cat << 1 << 2 << 3 << 4
unset
export PATH=a


#heredoc history?


echo """$?"""
echo """"$?""""
echo "'"$?"'"


echo 123 && (echo 456)
echo 123 || (echo 456)	#both are same. subshell is not about precedence between pipelines or commands?


<< 123 |||
<< 123 <<


$> ls
cat
$> *
// cat is waiting for input

$> ls
'<' abc cat
$> *
<: command not found


echo a$			# if the next character of dollar is one of the IFS, dollar doen't expand.
echo "a$ a"		# same for quoted dollar.
